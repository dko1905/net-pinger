// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
)

const createRecord = `-- name: CreateRecord :exec
INSERT INTO records (id, ts, failure, description) VALUES (?, ?, ?, ?)
`

type CreateRecordParams struct {
	ID          string
	Ts          string
	Failure     int64
	Description string
}

func (q *Queries) CreateRecord(ctx context.Context, arg CreateRecordParams) error {
	_, err := q.db.ExecContext(ctx, createRecord,
		arg.ID,
		arg.Ts,
		arg.Failure,
		arg.Description,
	)
	return err
}

const getRecordByLastFailure = `-- name: GetRecordByLastFailure :one
SELECT id, ts, failure, description FROM records
WHERE
  failure = 1
LIMIT 1
`

func (q *Queries) GetRecordByLastFailure(ctx context.Context) (Record, error) {
	row := q.db.QueryRowContext(ctx, getRecordByLastFailure)
	var i Record
	err := row.Scan(
		&i.ID,
		&i.Ts,
		&i.Failure,
		&i.Description,
	)
	return i, err
}

const getRecords = `-- name: GetRecords :many
SELECT id, ts, failure, description FROM records
`

func (q *Queries) GetRecords(ctx context.Context) ([]Record, error) {
	rows, err := q.db.QueryContext(ctx, getRecords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Record
	for rows.Next() {
		var i Record
		if err := rows.Scan(
			&i.ID,
			&i.Ts,
			&i.Failure,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
